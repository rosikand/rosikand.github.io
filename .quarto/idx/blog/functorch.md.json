{"title":"A Simple functorch Example","markdown":{"yaml":{"title":"A Simple functorch Example","date":"2022-11-05","author":"Rohan Sikand","format":{"html":{"html-math-method":"katex","css":"../styles/post.css"}}},"headingText":"import torchopt","containsRefs":false,"markdown":"\n\n\n<!-- ## <a href=\"../index.md\" class=\"home-page-nav-link\">ðŸ¦œ Rohan Sikand</a> -->\n\n<p class=\"arrow-back-header\">\n&larr; back to <a href=\"../index.html\">home</a>, <a href=\"../blog.html\">blog</a>\n</p>\n<hr>\n<!-- ### A Simple functorch Example -->\n\nIn recent years, there has been a small movement of people trying to go from state*ful* (Python OOP, class-based modules) to state*less* (pure functions) neural network code. The standard PyTorch `nn.module` is indeed a OOP-based class. But more recent libraries such as [JAX](https://github.com/google/jax), introduce the ability to feasiby create stateless (just functions!) machine learning models. Now, in [PyTorch version 1.13](https://pytorch.org/blog/PyTorch-1.13-release/), we have `functorch` in-tree (in the main package). Why stateless? Read [this blog post](https://sjmielke.com/jax-purify.htm) for the differences, but some reasons for why I like stateless code is because: \n\n- Less leaky abstractions (and less unknown abstractions in general!) \n- Closer to the mathematical form (after all, a neural network is just a series of functions chained together!)\n    - When you learn SGD in class in the mathematical form and then use PyTorch, the disconnect is fairly evident. \n- Less compute overhead (less things to keep track of internally --> less memory needed) \n- Ability to work a lower level (which, in my opinion, can help facilitate new ideas) \n- Ability to work with [function transformations](https://jax.readthedocs.io/en/latest/notebooks/quickstart.html) such as `vmap`, `pmap`, `jit`, and `grad` (PyTorch has `grad`... yes I know... but applying grad to a stateless function makes much more intuitive sense than applying it to some stateful module!). \n\n\nThis might sound like an advertisement for JAX (which might be coming up in a future blog post!), but it is really to set the stage for [functorch](https://github.com/pytorch/functorch). functorch is a library that allows you to accomplish nearly all of the above, but in PyTorch! The basic idea is to purify stateful PyTorch modules into stateless functions like this ([source](https://github.com/pytorch/functorch#working-with-nn-modules-make_functional-and-friends)): \n\n```python\nimport torch\nimport functorch\nfrom functorch import make_functional\n\nmodel = torch.nn.Linear(3, 3)\nfunc_model, params = make_functional(model)\n```\n\nAs functorch is relatively new, there aren't many examples out there showing how to use the library. So the goal of the rest of this post is to provide a simple example for creating an image classifier using functorch and PyTorch and updating the weights using SGD (no `torch.optim`!). \n\nHere is the code: \n\n```python\nimport torch\nimport torchplate\nfrom torchplate import experiment\nfrom torchplate import utils\nimport functorch\nfrom functorch import grad, grad_and_value\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader\nfrom rsbox import ml\nimport requests\nfrom tqdm.auto import tqdm\nimport cloudpickle as cp\nfrom urllib.request import urlopen\n\n\n\nclass Net(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = nn.Linear(3*32*32, 120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 16)\n        self.fc4 = nn.Linear(16, 3)\n\n    def forward(self, x):\n        x = torch.flatten(x, 1)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = F.relu(self.fc3(x))\n        x = self.fc4(x)\n        return x\n\n\n\nclass OptExp:\n    def __init__(self): \n        self.model_module = Net()\n        self.criterion = nn.CrossEntropyLoss()\n        dataset = cp.load(urlopen(\"https://stanford.edu/~rsikand/assets/datasets/mini_cifar.pkl\")) \n        self.trainloader, self.testloader = torchplate.utils.get_xy_loaders(dataset)\n        self.model, self.params = functorch.make_functional(self.model_module)  # init network \n    \n\n    def predict(self, x):\n        \"\"\"returns logits\"\"\"\n        assert self.model is not None\n        assert self.params is not None\n        logits = self.model(self.params, x)\n        return logits \n\n\n    @staticmethod\n    def sgd_step(params, gradients, lr):\n        \"\"\"one gradient step for updating the weights\"\"\"\n        updated_params = []\n        for param, gradient in zip(params, gradients):\n            update = param - (lr * gradient)\n            updated_params.append(update)\n        \n        return tuple(updated_params)\n    \n\n    @staticmethod\n    def stateless_loss(params, model, criterion, batch):\n        \"\"\"\n        Need to perform forward pass and loss calculation in one function\n        since we need gradients w.r.t params (must be args[0]). The first\n        value we return also needs to be the scalar loss value.  \n        \"\"\"\n        x, y = batch\n        logits = model(params, x)\n        loss_val = criterion(logits, y)\n        return loss_val, logits\n    \n\n\n    @staticmethod\n    def train_step(params, model, criterion, batch, lr):\n        \"\"\"Combine this all into one function for modularity\"\"\"\n        # has_aux means we can return more than just the scalar loss \n        grad_and_loss_fn = grad_and_value(OptExp.stateless_loss, has_aux=True)  \n        grads, aux_outputs = grad_and_loss_fn(params, model, criterion, batch)  # get the grads \n        loss_val, logits = aux_outputs\n        params = OptExp.sgd_step(params, grads, lr) \n        return params, loss_val, logits\n\n    \n    def train(self, num_epochs=10, lr=0.01):\n        print('Beginning training!')\n        epoch_num = 0\n        for epoch in range(num_epochs):\n            running_loss = 0.0\n            epoch_num += 1\n            tqdm_loader = tqdm(self.trainloader)\n            for batch in tqdm_loader:\n                tqdm_loader.set_description(f\"Epoch {epoch_num}\")\n\n                # update params with one step \n                self.params, loss_val, logits = OptExp.train_step(self.params, self.model, self.criterion, batch, lr)\n\n                running_loss += loss_val\n\n            # print loss\n            epoch_avg_loss = running_loss/len(self.trainloader)\n            print(\"Training Loss (epoch \" + str(epoch_num) + \"):\", epoch_avg_loss)\n\n\n        print('Finished training!')\n\n\nexp = OptExp()\nexp.train(num_epochs=50, lr=0.01)\n```","srcMarkdownNoYaml":"\n\n\n<!-- ## <a href=\"../index.md\" class=\"home-page-nav-link\">ðŸ¦œ Rohan Sikand</a> -->\n\n<p class=\"arrow-back-header\">\n&larr; back to <a href=\"../index.html\">home</a>, <a href=\"../blog.html\">blog</a>\n</p>\n<hr>\n<!-- ### A Simple functorch Example -->\n\nIn recent years, there has been a small movement of people trying to go from state*ful* (Python OOP, class-based modules) to state*less* (pure functions) neural network code. The standard PyTorch `nn.module` is indeed a OOP-based class. But more recent libraries such as [JAX](https://github.com/google/jax), introduce the ability to feasiby create stateless (just functions!) machine learning models. Now, in [PyTorch version 1.13](https://pytorch.org/blog/PyTorch-1.13-release/), we have `functorch` in-tree (in the main package). Why stateless? Read [this blog post](https://sjmielke.com/jax-purify.htm) for the differences, but some reasons for why I like stateless code is because: \n\n- Less leaky abstractions (and less unknown abstractions in general!) \n- Closer to the mathematical form (after all, a neural network is just a series of functions chained together!)\n    - When you learn SGD in class in the mathematical form and then use PyTorch, the disconnect is fairly evident. \n- Less compute overhead (less things to keep track of internally --> less memory needed) \n- Ability to work a lower level (which, in my opinion, can help facilitate new ideas) \n- Ability to work with [function transformations](https://jax.readthedocs.io/en/latest/notebooks/quickstart.html) such as `vmap`, `pmap`, `jit`, and `grad` (PyTorch has `grad`... yes I know... but applying grad to a stateless function makes much more intuitive sense than applying it to some stateful module!). \n\n\nThis might sound like an advertisement for JAX (which might be coming up in a future blog post!), but it is really to set the stage for [functorch](https://github.com/pytorch/functorch). functorch is a library that allows you to accomplish nearly all of the above, but in PyTorch! The basic idea is to purify stateful PyTorch modules into stateless functions like this ([source](https://github.com/pytorch/functorch#working-with-nn-modules-make_functional-and-friends)): \n\n```python\nimport torch\nimport functorch\nfrom functorch import make_functional\n\nmodel = torch.nn.Linear(3, 3)\nfunc_model, params = make_functional(model)\n```\n\nAs functorch is relatively new, there aren't many examples out there showing how to use the library. So the goal of the rest of this post is to provide a simple example for creating an image classifier using functorch and PyTorch and updating the weights using SGD (no `torch.optim`!). \n\nHere is the code: \n\n```python\nimport torch\nimport torchplate\nfrom torchplate import experiment\nfrom torchplate import utils\nimport functorch\nfrom functorch import grad, grad_and_value\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader\nfrom rsbox import ml\n# import torchopt\nimport requests\nfrom tqdm.auto import tqdm\nimport cloudpickle as cp\nfrom urllib.request import urlopen\n\n\n\nclass Net(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = nn.Linear(3*32*32, 120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 16)\n        self.fc4 = nn.Linear(16, 3)\n\n    def forward(self, x):\n        x = torch.flatten(x, 1)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = F.relu(self.fc3(x))\n        x = self.fc4(x)\n        return x\n\n\n\nclass OptExp:\n    def __init__(self): \n        self.model_module = Net()\n        self.criterion = nn.CrossEntropyLoss()\n        dataset = cp.load(urlopen(\"https://stanford.edu/~rsikand/assets/datasets/mini_cifar.pkl\")) \n        self.trainloader, self.testloader = torchplate.utils.get_xy_loaders(dataset)\n        self.model, self.params = functorch.make_functional(self.model_module)  # init network \n    \n\n    def predict(self, x):\n        \"\"\"returns logits\"\"\"\n        assert self.model is not None\n        assert self.params is not None\n        logits = self.model(self.params, x)\n        return logits \n\n\n    @staticmethod\n    def sgd_step(params, gradients, lr):\n        \"\"\"one gradient step for updating the weights\"\"\"\n        updated_params = []\n        for param, gradient in zip(params, gradients):\n            update = param - (lr * gradient)\n            updated_params.append(update)\n        \n        return tuple(updated_params)\n    \n\n    @staticmethod\n    def stateless_loss(params, model, criterion, batch):\n        \"\"\"\n        Need to perform forward pass and loss calculation in one function\n        since we need gradients w.r.t params (must be args[0]). The first\n        value we return also needs to be the scalar loss value.  \n        \"\"\"\n        x, y = batch\n        logits = model(params, x)\n        loss_val = criterion(logits, y)\n        return loss_val, logits\n    \n\n\n    @staticmethod\n    def train_step(params, model, criterion, batch, lr):\n        \"\"\"Combine this all into one function for modularity\"\"\"\n        # has_aux means we can return more than just the scalar loss \n        grad_and_loss_fn = grad_and_value(OptExp.stateless_loss, has_aux=True)  \n        grads, aux_outputs = grad_and_loss_fn(params, model, criterion, batch)  # get the grads \n        loss_val, logits = aux_outputs\n        params = OptExp.sgd_step(params, grads, lr) \n        return params, loss_val, logits\n\n    \n    def train(self, num_epochs=10, lr=0.01):\n        print('Beginning training!')\n        epoch_num = 0\n        for epoch in range(num_epochs):\n            running_loss = 0.0\n            epoch_num += 1\n            tqdm_loader = tqdm(self.trainloader)\n            for batch in tqdm_loader:\n                tqdm_loader.set_description(f\"Epoch {epoch_num}\")\n\n                # update params with one step \n                self.params, loss_val, logits = OptExp.train_step(self.params, self.model, self.criterion, batch, lr)\n\n                running_loss += loss_val\n\n            # print loss\n            epoch_avg_loss = running_loss/len(self.trainloader)\n            print(\"Training Loss (epoch \" + str(epoch_num) + \"):\", epoch_avg_loss)\n\n\n        print('Finished training!')\n\n\nexp = OptExp()\nexp.train(num_epochs=50, lr=0.01)\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","css":["../styles/post.css"],"output-file":"functorch.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","title":"A Simple functorch Example","date":"2022-11-05","author":"Rohan Sikand"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}